# Use Python 3.10+ as required
FROM python:3.10-slim

# Install system packages required by Status-Page
RUN apt-get update && apt-get install -y \
    python3-dev \
    build-essential \
    libxml2-dev \
    libxslt1-dev \
    libffi-dev \
    libpq-dev \
    libssl-dev \
    zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*

# Create statuspage user
RUN groupadd --system statuspage && \
    useradd --system --gid statuspage --home-dir /opt/status-page statuspage

# Create application directory
WORKDIR /opt/status-page

# Copy application code
COPY . .

# Install Python dependencies with rq-scheduler fix
RUN pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip uninstall -y rq_scheduler || true && \
    pip install --no-cache-dir --upgrade --force-reinstall "rq-scheduler>=0.14.0"

# Test that rq_scheduler works
RUN python -c "import rq, rq_scheduler; from rq_scheduler import Scheduler; print('RQ version:', rq.__version__); print('rq_scheduler OK')"

# Create media directory
RUN mkdir -p statuspage/media

# Fix Django URLs for static files serving
RUN echo "" >> statuspage/statuspage/urls.py && \
    echo "# Static files serving for Kubernetes" >> statuspage/statuspage/urls.py && \
    echo "if settings.DEBUG:" >> statuspage/statuspage/urls.py && \
    echo "    from django.conf.urls.static import static" >> statuspage/statuspage/urls.py && \
    echo "    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)" >> statuspage/statuspage/urls.py

# Pre-build static files (like upgrade.sh does)
RUN cd statuspage && \
    python manage.py collectstatic --no-input && \
    python manage.py remove_stale_contenttypes --no-input || true

# Set ownership
RUN chown -R statuspage:statuspage /opt/status-page

# Switch to statuspage user
USER statuspage

# Set working directory for Django
WORKDIR /opt/status-page/statuspage

# Expose port 8000
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:8000/', timeout=5)" || exit 1

# Run migrations and start server (production-ready)
CMD ["bash", "-c", "\
    python manage.py migrate --no-input && \
    python manage.py clearsessions && \
    gunicorn --bind 0.0.0.0:8000 \
    --workers 3 \
    --worker-class sync \
    --worker-connections 1000 \
    --max-requests 1000 \
    --max-requests-jitter 100 \
    --timeout 30 \
    --keep-alive 2 \
    --access-logfile - \
    --error-logfile - \
    statuspage.wsgi:application"]
